*코드파일 여시고 제가 적어둔 변수나 함수명 
Ctrl+F로 검색하셔서 찾아 가시면 될겁니다.

Sensitivity = 600
- 초기 값은 600으로 설정 되어 있는데 mpu센서의 감도를 조정하는 수치입니다. 낮아지면 마우스가 빨라지고 높아지면 그만큼 움직임이 느려질 겁니다. 유지보수를 직접하셔야 된다고 들었으니 직접해보는걸 추천드립니다. 반대로 생각하실수 있는데 그 이유는 하래쪽 공식을 보시면 아실 겁니다.

delayi = 20
- 코드 맨 하단에 적혀있는 딜레이를 조정하는 변수인데 mpu센서 데이터를 보내고 이전 데이터와 다음 데이터     
 의 충돌을 방지 하기 위해 약간의 딜레이를 준것입니다. 이 딜레이가 없어도 마우스 커서가 잘 움직인다면 딜
 레이를 삭제 하셔도 무방합니다. 하지만 딜레이를 없앴을때 마우스 커서가 이전데이터와 충돌이 일어나 버벅
 인다면 저럭체 0.02라도 딜레이를 추셔야지 충돌을 피할 수 있습니다.

* 그 아래와 setup 사이의 코드들은 mpu센서의 레지스터리에 관한 것들이랑 보실필요는 없을것같습니다.

그럼 바로 setup부분으로 가보겠습니다.

Serial.begin(115200);
- 마우스에서 감도 조절과 진동 감도 조절을 할때 사무실에서 보셨던 것철머 시리얼 모니터에 프린트를 찍어가며 하셔야 감도 조절에 도움이 되실겁니다. 아니면 시리얼 플로터를 사용하셔서 그래프가 부드럽게 움직이는지 확인하셔야 할겁니다. 그러기 위해서는 이 부분이 필요 합니다. Serial통신을 시작하겠다는 거죠 115200의 통신속도로 아두이노 시리얼 모니터 속도를 도구에 들어가시면 115200으로 맞춰 주실수있습니다. 코드와 실제 보드의 보드레이트(통신속도가) 일치해야지 시리얼 모니터의 데이터가 깨지지 않습니다. 이점 유의해주세요.


mpu 축방향조정

    gyroX = gyroX / Sensitivity * (-1); // x축의 좌우 방향을 반대로 변경
    gyroY = gyroY / Sensitivity; // y축의 상하 방향은 그대로 유지
    gyroZ = gyroZ / Sensitivity; // z축의 가속도를 정규화

- 보시면 축마다 계산이 될때 Sensitiviti가 되어 있습니다. 나눴을때 나오는 수치에 축을 반전시키고 싶으시면 *(-1) 아니면 그대로 그리고 X축과 Y축을 바꾸고 싶으시면 계산을 해놓고 축력을 반대로 하시면 됩니다.

    bleMouse.move(gyroY, gyroX); // X축은 좌우, Y축은 상하로 설정하여 마우스 이동
- 여기가 원래 (gyroX, gyro Z); 되어 있었는데 제가 바꾼것입니다.
 이런식으로 바꿔주시면 원하는데로 사용이 가능합니다.